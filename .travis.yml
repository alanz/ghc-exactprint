# NB: don't set `language: haskell` here
language: c
sudo: false

addons:
  apt:
    sources:
    - hvr-ghc
    packages:
    - cabal-install-head
    - ghc-head

cache:
  directories:
    - .cabal-sandbox

# See also https://github.com/hvr/multi-ghc-travis for more information
env:
 # - CABALVER=1.22 GHCVER=7.10.1
# - CABALVER=head GHCVER=7.10.2
 - CABALVER=head GHCVER=head

# Focus on head again when 7.10.2 sorted
matrix:
  allow_failures:
    - env: CABALVER=head GHCVER=head

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
 - travis_retry cabal update

install:
 - cabal --version
 - cabal sandbox init
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - git clone https://github.com/mpickering/refact
 - cabal sandbox add-source ./refact
 - cabal install --only-dependencies --enable-tests --enable-benchmarks -froundtrip

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-coverage --enable-tests --enable-benchmarks -v2 -froundtrip # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
 - cabal check
 - cabal sdist   # tests that a source-distribution can be generated
 # check that the generated source-distribution can be built & installed
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
      (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

notifications:
  irc: "irc.freenode.org#haskell-refactorer"

# EOF
